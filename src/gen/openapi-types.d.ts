/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/rooms": {
    /** Create a new room */
    post: operations["post_CreateRoomEndpoint"];
  };
  "/rooms/{roomId}": {
    /** Get room info */
    get: operations["get_GetRoomEndpoint"];
    /** Update room info */
    put: operations["put_UpdateRoomEndpoint"];
  };
  "/rooms/{roomId}/chatters": {
    /** Get chatters in room */
    get: operations["get_GetChattersInRoomEndpoint"];
  };
  "/rooms/{roomId}/chatters/{chatterId}": {
    /** Add chatter to room */
    post: operations["post_AddChatterToRoomEndpoint"];
    /** Remove chatter from room */
    delete: operations["delete_RemoveChatterFromRoomEndpoint"];
  };
  "/chatters": {
    /** Get all chatters */
    get: operations["get_GetChattersEndpoint"];
    /** Create a new chatter */
    post: operations["post_CreateChatterEndpoint"];
  };
  "/chatters/{chatterId}": {
    /** Get a specific chatter */
    get: operations["get_GetChatterEndpoint"];
    /** Delete a specific chatter */
    delete: operations["delete_DeleteChatterEndpoint"];
  };
  "/chatters/{chatterId}/accessToken": {
    /** Get access token for a specific chatter */
    get: operations["get_GetChatterAccessTokenEndpoint"];
  };
  "/messages/{messageId}": {
    /** Get message */
    get: operations["get_GetMessageEndpoint"];
    /** Edit message */
    put: operations["put_EditMessageEndpoint"];
    /** Delete message */
    delete: operations["delete_DeleteMessageEndpoint"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
  };
  responses: never;
  parameters: {
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Create a new room */
  post_CreateRoomEndpoint: {
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          roomType?: "open" | "public" | "private";
          /** @enum {string} */
          roomStatus?: "active" | "inactive";
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      /** @description Chatter not owned by client */
      403: {
        content: {
          "application/json": string;
        };
      };
      /** @description Chatter not found */
      404: {
        content: {
          "application/json": string;
        };
      };
      /** @description Chatter already in room */
      409: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Get room info */
  get_GetRoomEndpoint: {
    parameters: {
      query: {
        roomId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            id: number;
            clientId: number;
            /** @enum {string} */
            roomType: "open" | "public" | "private";
            /** @enum {string} */
            roomStatus: "active" | "inactive";
          };
        };
      };
    };
  };
  /** Update room info */
  put_UpdateRoomEndpoint: {
    parameters: {
      query: {
        roomId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          roomType?: "open" | "public" | "private";
          /** @enum {string} */
          roomStatus?: "active" | "inactive";
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get chatters in room */
  get_GetChattersInRoomEndpoint: {
    parameters: {
      path: {
        roomId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              id: number;
              chatterName: string;
              created: string;
              clientId: number;
              unbanDate: string | null;
              banReason: string | null;
              chatterStatus: string;
            })[];
        };
      };
    };
  };
  /** Add chatter to room */
  post_AddChatterToRoomEndpoint: {
    parameters: {
      path: {
        roomId: number;
        chatterId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Chatter not owned by client */
      403: {
        content: {
          "application/json": string;
        };
      };
      /** @description Chatter not found */
      404: {
        content: {
          "application/json": string;
        };
      };
      /** @description Chatter already in room */
      409: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Remove chatter from room */
  delete_RemoveChatterFromRoomEndpoint: {
    parameters: {
      path: {
        roomId: number;
        chatterId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Chatter not in room */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Get all chatters */
  get_GetChattersEndpoint: {
    parameters: {
      query?: {
        size?: number;
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            chatters: ({
                id: number;
                chatterName: string;
                created: string;
                clientId: number;
                unbanDate: string | null;
                banReason: string | null;
                chatterStatus: string;
              })[];
            total: number;
          };
        };
      };
    };
  };
  /** Create a new chatter */
  post_CreateChatterEndpoint: {
    requestBody?: {
      content: {
        "application/json": {
          chatterName: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
    };
  };
  /** Get a specific chatter */
  get_GetChatterEndpoint: {
    parameters: {
      path: {
        chatterId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            id: number;
            chatterName: string;
            created: string;
            clientId: number;
            unbanDate: string | null;
            banReason: string | null;
            chatterStatus: string;
          };
        };
      };
    };
  };
  /** Delete a specific chatter */
  delete_DeleteChatterEndpoint: {
    parameters: {
      path: {
        chatterId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get access token for a specific chatter */
  get_GetChatterAccessTokenEndpoint: {
    parameters: {
      path: {
        chatterId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            accessToken: string;
          };
        };
      };
    };
  };
  /** Get message */
  get_GetMessageEndpoint: {
    parameters: {
      path: {
        messageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            id: number;
            chatterType: string;
            chatterId: number | null;
            clientId: number;
            roomId: number;
            messageText: string;
            sentAt: string;
            moderationStatus: string;
          };
        };
      };
    };
  };
  /** Edit message */
  put_EditMessageEndpoint: {
    parameters: {
      path: {
        messageId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          moderationStatus: {
            /** @example pending */
            PENDING: string;
            /** @example approved */
            APPROVED: string;
            /** @example rejected */
            REJECTED: string;
            /** @example unmoderated */
            UNMODERATED: string;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Delete message */
  delete_DeleteMessageEndpoint: {
    parameters: {
      path: {
        messageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
}
